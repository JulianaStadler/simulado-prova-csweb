// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSiteFanfic.Models;

#nullable disable

namespace simulado_prova_csweb.Migrations
{
    [DbContext(typeof(WebSiteFanficDbContext))]
    partial class WebSiteFanficDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FanficReadingList", b =>
                {
                    b.Property<Guid>("FanficsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReadingListsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FanficsId", "ReadingListsId");

                    b.HasIndex("ReadingListsId");

                    b.ToTable("ReadingListFanfics", (string)null);
                });

            modelBuilder.Entity("WebSiteFanfic.Models.Fanfic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fanfics");
                });

            modelBuilder.Entity("WebSiteFanfic.Models.ReadingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastAlteration")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ReadingLists");
                });

            modelBuilder.Entity("WebSiteFanfic.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReadingListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FanficReadingList", b =>
                {
                    b.HasOne("WebSiteFanfic.Models.Fanfic", null)
                        .WithMany()
                        .HasForeignKey("FanficsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSiteFanfic.Models.ReadingList", null)
                        .WithMany()
                        .HasForeignKey("ReadingListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebSiteFanfic.Models.Fanfic", b =>
                {
                    b.HasOne("WebSiteFanfic.Models.User", "User")
                        .WithMany("WritedFanfics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSiteFanfic.Models.ReadingList", b =>
                {
                    b.HasOne("WebSiteFanfic.Models.User", "User")
                        .WithOne("ReadingList")
                        .HasForeignKey("WebSiteFanfic.Models.ReadingList", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSiteFanfic.Models.User", b =>
                {
                    b.Navigation("ReadingList");

                    b.Navigation("WritedFanfics");
                });
#pragma warning restore 612, 618
        }
    }
}
